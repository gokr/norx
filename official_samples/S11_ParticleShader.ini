; orx - Tutorial config file
; Should be used with orx v.1.4+

[Tutorial]
ViewportList    = Viewport # CompositingViewport

[Viewport]
; Modifying base viewport to render to a texture instead of screen
BackgroundColor = (0, 0, 0)
TextureList     = ViewportTexture

[CompositingViewport]
ShaderList = Decompose

[Decompose]
Code = "void main()
{
  float fRed = 0.0, fGreen = 0.0, fBlue = 0.0;

  // Computes positions with offsets
  vec2 vRedPos    = vec2(gl_TexCoord[0].x + offset.x, gl_TexCoord[0].y + offset.y);
  vec2 vGreenPos  = vec2(gl_TexCoord[0].x, gl_TexCoord[0].y);
  vec2 vBluePos   = vec2(gl_TexCoord[0].x - offset.x, gl_TexCoord[0].y - offset.y);

  // Red pixel inside texture?
  if((vRedPos.x >= 0.0) && (vRedPos.x <= 1.0) && (vRedPos.y >= 0.0) && (vRedPos.y <= 1.0))
  {
    // Gets its value
    fRed = texture2D(texture, vRedPos).r;
  }

  // Green  pixel inside texture?
  if((vGreenPos.x >= 0.0) && (vGreenPos.x <= 1.0) && (vGreenPos.y >= 0.0) && (vGreenPos.y <= 1.0))
  {
    // Gets its value
    fGreen = texture2D(texture, vGreenPos).g;
  }

  // Blue pixel inside texture?
  if((vBluePos.x >= 0.0) && (vBluePos.x <= 1.0) && (vBluePos.y >= 0.0) && (vBluePos.y <= 1.0))
  {
    // Gets its value
    fBlue = texture2D(texture, vBluePos).b;
  }

  // Outputs the final decomposed pixel
  gl_FragColor = vec4(fRed, fGreen, fBlue, 1.0);
}"
ParamList = texture # offset
texture   = ViewportTexture ; <= Using the texture to which we rendered with the main viewport as input
offset    = (-0.05, -0.05) ~ (0.05, 0.05); <= Let's take some random offset
